version: '3.8'

services:
  # Milvus Public 
  milvus_public:
    image: milvusdb/milvus:v2.6.0
    container_name: milvus_public
    restart: unless-stopped
    ports:
      - "19530:19530"
      - "9091:9091"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - milvus_public_data:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9091/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # Milvus Private
  milvus_private:
    image: milvusdb/milvus:v2.6.0
    container_name: milvus_private
    restart: unless-stopped
    ports:
      - "19531:19530"
      - "9092:9091"
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - milvus_private_data:/var/lib/milvus
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9091/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: postgres_rag
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=en_US.UTF-8
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis_rag
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory ${REDIS_MAX_MEMORY:-512mb} --maxmemory-policy allkeys-lru ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "${REDIS_PASSWORD:+-a $REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # MinIO
  minio:
    image: minio/minio:latest
    container_name: minio_rag
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # etcd
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: etcd_rag
    restart: unless-stopped
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # Zookeeper 
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper_rag
    restart: unless-stopped
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - rag_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka_rag
    restart: unless-stopped
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "${KAFKA_HOST_PORT:-29092}:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:${KAFKA_PORT:-9092},PLAINTEXT_HOST://localhost:${KAFKA_HOST_PORT:-29092}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network
  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag_api
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:8000"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://${REDIS_PASSWORD:+:$REDIS_PASSWORD@}redis:6379/${REDIS_DB:-0}
      - MILVUS_PUBLIC_URI=http://milvus_public:19530
      - MILVUS_PRIVATE_URI=http://milvus_private:19530
      - MINIO_ENDPOINT=minio:9000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - document_storage:/app/documents
    depends_on:
      - postgres
      - redis
      - milvus_public
      - milvus_private
      - kafka
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag_network

  # Document Processing Worker
  document_processor:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: rag_document_processor
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://${REDIS_PASSWORD:+:$REDIS_PASSWORD@}redis:6379/${REDIS_DB:-0}
      - MILVUS_PUBLIC_URI=http://milvus_public:19530
      - MILVUS_PRIVATE_URI=http://milvus_private:19530
      - MINIO_ENDPOINT=minio:9000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - WORKER_TYPE=document_processor
    volumes:
      - ./logs:/app/logs
      - document_storage:/app/documents
    depends_on:
      - api
      - kafka
    networks:
      - rag_network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_rag
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rag_network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_rag
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-10000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - rag_network

  # nginx:
  #   image: nginx:alpine
  #   container_name: nginx_rag
  #   restart: unless-stopped
  #   ports:
  #     - "${NGINX_HTTP_PORT:-80}:80"
  #     - "${NGINX_HTTPS_PORT:-443}:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - api
  #   networks:
  #     - rag_network
  #   profiles:
  #     - production

# VOLUMES
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  milvus_public_data:
    driver: local
  milvus_private_data:
    driver: local
  minio_data:
    driver: local
  etcd_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  document_storage:
    driver: local

# NETWORKS
networks:
  rag_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16